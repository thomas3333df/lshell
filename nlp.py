#!/usr/bin/python

# 检查命令行中的操作字符串。检查是否是下面的，如果没有话，那么告知推出

# 获取当前的os
当前操作系统=获取操作系统()
支持的操作系统列表=获取支持的操作系统列表()
# 检查当前的os是否是在支持的范围之内，如果不是的话，那么告知不进行向下进行
if 当前操作系统 not in 支持的操作系统列表:
    print()

# 检查程序是否已经安装，如果没有安装，那么需要告知用户进行安装

# 安装函数


def  安装():

    # 初始化变量
    # 检查python是否安装,如果么有安装的话,进行安装
    # 如果已经安装的话,那么检查版本号是否在支持的范围之内,如果不支持的话,那么告知
    # 显示版权信息
    显示版权信息()
    # 检查用户是否接受。如果不能接受那么直接退出，如果可以接受那么继续
    # 如果可以接受，那么将程序中的lock删除
    # 检查当前的os，检查是否是在我们支持的os范围之内，如果不是的话，那么告知退出
    # 打印语言，提示用户选择
    # 如果用户选择cancel，那么推出
    # 如果用户选择继续，那么正式开始安装
    # 获取所有的alias列表
    # 循环所有的命令
    # 检查当前的命令是否在alias表中,如果么有的话,那么调用系统变量进行添加,将该命令添加到新增alias列表中
    # 如果有的话,将该命令添加到已经存在的alias列表中,之后直接跳过,
    # 如果没有出现错误,那么高

    pass

# 删除函数
def 卸载():
    # 检查程序是否安装，如果么有安装，那么告知用户删除成功
    # 如果已经安装
    pass

# 更新函数
def 更新():
    pass

# 帮助函数
def 帮助(命令):
    # 检查命令是否在我么支持的命令列表之内，如果是的话，那么显示这条命令的详细信息。
    # 如果不是的话，那么告知命令没有找到’
    # 如果么有输入命令名称的话，那么直接显示所有命令的命令的帮助信息
    # 打印帮助信息
    pass

def 运行(命令):
    # 检查命令是否在本地支持的命令范围之内，如果是的话，那么调用本地的命令即可
    # 如果么有的话，那么提交到服务器
    pass

def 翻译(源语言,目标语言):
    # 检查言语言是否在我们支持的列表之内
    # 检查目标语言是否在我们支持的列表之内
    # 如果都支持的话，那么调用翻译引擎进行翻译
    pass

def 版本():
    # 打印当前程序的版本信息
    print('nlp 版本信息:1.0')
    pass

def 获取操作系统():
    return ""

def 获取支持的操作系统列表():
    return  []

def 显示版权信息():
    print('')